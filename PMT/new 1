import java.util.Iterator;
import java.util.function.Function;

public class GenerationIterable<A> implements Iterable<A> {
    /*
	Den teil hab ich dier hier mal eingefügt,
	dann musst du nur copy pasten und kannst es ausführen
	*/
	public static void main(String[] args){
		int x=1;
		Function<Integer, Integer> func = x -> {
        x++;
        return x;};
        GenerationIterable func1 = new GenerationIterable(1, func);
		/*
		erwarteter Output: 
		"f.apply: 2", "forEach :2",
		"f.apply: 3" ...,
		"f.apply: 4"...,
		"f.apply: 5"...
		*/
	}
	
  A a;
  Function<A,A> f;
  public GenerationIterable(A a, Function<A,A> f){
    this.a=a;
    this.f=f;
    iterator().forEachRemaining((i)->System.out.println("forEach :"+i));
  }


  @Override
  public Iterator<A> iterator() {
    return new FunctionIterator<A>(f,a);
  }

  private class FunctionIterator<A> implements Iterator<A>{
    A a;
    Function<A,A> f;
    int plsStopMe =5;

    FunctionIterator(Function<A,A> f, A a){
      this.f=f;
      this.a=a;

    }

    @Override
    public boolean hasNext() {
      plsStopMe--;
      return plsStopMe>0;
    }

    @Override
    public A next() {
      A result = f.apply(a);

      System.out.println("f.apply: "+f.apply(a));
      a = result;

      return result;
    }
  }


}
